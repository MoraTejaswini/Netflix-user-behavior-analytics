# -*- coding: utf-8 -*-
"""netflix_capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C1knW_PkWqDdLZ19TOQjoOBNScJjg1iz
"""

from google.colab import files

uploaded = files.upload()



import pandas as pd

# Replace the filename with the uploaded file name if different
df = pd.read_csv('netflix_titles.csv')
display(df.head())

# First few rows
print("First 5 rows:")
print(df.head())

# Info about columns and types
print("\nInfo:")
print(df.info())

# Check missing values
print("\nNull values per column:")
print(df.isnull().sum())

# Basic statistics
print("\nDescribe:")
print(df.describe(include='all'))

# Check duplicates
print("\nNumber of duplicate rows:", df.duplicated().sum())

df['director'] = df['director'].fillna('Unknown')
df['cast'] = df['cast'].fillna('Unknown')
df['country'] = df['country'].fillna('Unknown')
df['rating'] = df['rating'].fillna('Not Rated')

df['date_added'] = pd.to_datetime(df['date_added'], format='mixed')

df['date_added'].head()
df['date_added'].min(), df['date_added'].max()

# Split number and type
df['duration_int'] = df['duration'].str.extract('(\d+)').fillna(0).astype(int)
df['duration_type'] = df['duration'].str.extract('([a-zA-Z]+)')

# Check
display(df[['duration', 'duration_int', 'duration_type']].head(10))

df['listed_in'] = df['listed_in'].str.split(', ')

#Trim spaces and standardize text
df['type'] = df['type'].str.strip().str.title()
df['country'] = df['country'].str.strip()
df['rating'] = df['rating'].str.strip()

# Check nulls again
df.isnull().sum()

# Check sample rows
df.head()

import pandas as pd

# Load the dataset
df = pd.read_csv('netflix_titles1.csv')

# Function to safely convert string representation of list or string to a list
def safe_split(item):
    if isinstance(item, str):
        # Split by comma and space, and strip whitespace from each element
        return [x.strip() for x in item.split(', ') if x.strip()]
    # If it's already a list or something else, return as is
    return item

# Apply the safe_split function to 'listed_in' and 'cast' columns
df['listed_in'] = df['listed_in'].apply(safe_split)
df['cast'] = df['cast'].apply(safe_split)

# Fill missing values
df['director'] = df['director'].fillna('Unknown')
df['cast'] = df['cast'].fillna('Unknown')
df['country'] = df['country'].fillna('Unknown')
df['rating'] = df['rating'].fillna('Not Rated')

# Convert 'date_added' to datetime objects
df['date_added'] = pd.to_datetime(df['date_added'], format='mixed')

# Split 'duration' into integer and type columns
df['duration_int'] = df['duration'].str.extract('(\d+)').fillna(0).astype(int)
df['duration_type'] = df['duration'].str.extract('([a-zA-Z]+)')

# Split 'listed_in' into a list of strings
df['listed_in'] = df['listed_in'].str.split(', ')

# Trim spaces and standardize text in relevant columns
df['type'] = df['type'].str.strip().str.title()
df['country'] = df['country'].str.strip()
df['rating'] = df['rating'].str.strip()

# Save cleaned DataFrame as CSV in Colab
df.to_csv('netflix_cleaned.csv', index=False)

from google.colab import files
files.download('netflix_cleaned.csv')

!pip install sqlalchemy

import pandas as pd
from sqlalchemy import create_engine

# Load the cleaned CSV
df = pd.read_csv('netflix_cleaned.csv')

from sqlalchemy import create_engine

# Create a SQLite in-memory database engine
engine = create_engine('sqlite:///:memory:')

# Write the DataFrame to a SQLite table
df.to_sql('netflix', engine, index=False, if_exists='replace')

# Read first 5 rows from SQL table
query_result = pd.read_sql('SELECT * FROM netflix LIMIT 5', engine)
query_result

# Count total rows
total_rows = pd.read_sql('SELECT COUNT(*) FROM netflix', engine)
print("Total rows:")
display(total_rows)

# Count movies vs TV shows
type_counts = pd.read_sql('SELECT type, COUNT(*) FROM netflix GROUP BY type', engine)
print("\nMovies vs TV shows:")
display(type_counts)

# Unique countries
unique_countries = pd.read_sql('SELECT DISTINCT country FROM netflix LIMIT 10', engine) # Limiting to 10 for display
print("\nUnique countries (first 10):")
display(unique_countries)

# Movies/Shows per year
content_per_year = pd.read_sql('SELECT release_year, COUNT(*) FROM netflix GROUP BY release_year ORDER BY release_year', engine)
print("\nContent per year:")
display(content_per_year)

import pandas as pd
from sqlalchemy import create_engine

# Make sure your engine is set
engine = create_engine('sqlite:///netflix.db')

# 1. Movies vs TV Shows
query1 = """
SELECT type, COUNT(*) AS count
FROM netflix
WHERE type IS NOT NULL AND type != ''
GROUP BY type;
"""
df1 = pd.read_sql(query1, engine)
print("1. Movies vs TV Shows")
print(df1)

# 2. Titles added per year
query2 = """
SELECT release_year, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL
GROUP BY release_year
ORDER BY release_year;
"""
df2 = pd.read_sql(query2, engine)
print("\n2. Titles per Year")
print(df2)

# 3. Titles added per month
query3 = """
SELECT SUBSTR(date_added, 1, INSTR(date_added, ' ')-1) AS month,
       COUNT(*) AS count
FROM netflix
WHERE date_added IS NOT NULL AND date_added != ''
GROUP BY month
ORDER BY count DESC;
"""
df3 = pd.read_sql(query3, engine)
print("\n3. Titles per Month")
print(df3)

# 4. Top 10 countries by content
query4 = """
SELECT country, COUNT(*) AS count
FROM netflix
WHERE country IS NOT NULL AND country != ''
GROUP BY country
ORDER BY count DESC
LIMIT 10;
"""
df4 = pd.read_sql(query4, engine)
print("\n4. Top 10 Countries by Content")
print(df4)

# 5. Co-productions (multiple countries)
query5 = """
SELECT COUNT(*) AS co_productions
FROM netflix
WHERE country LIKE '%,%';
"""
df5 = pd.read_sql(query5, engine)
print("\n5. Co-productions")
print(df5)

# 6. Top 10 genres
query6 = """
SELECT listed_in, COUNT(*) AS count
FROM netflix
WHERE listed_in IS NOT NULL AND listed_in != ''
GROUP BY listed_in
ORDER BY count DESC
LIMIT 10;
"""
df6 = pd.read_sql(query6, engine)
print("\n6. Top 10 Genres")
print(df6)

# 7. Titles with multiple genres
query7 = """
SELECT COUNT(*) AS multiple_genres
FROM netflix
WHERE listed_in LIKE '%,%';
"""
df7 = pd.read_sql(query7, engine)
print("\n7. Titles with Multiple Genres")
print(df7)

# 8. Genre trend per year
query8 = """
SELECT release_year, listed_in, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND listed_in IS NOT NULL AND listed_in != ''
GROUP BY release_year, listed_in
ORDER BY release_year;
"""
df8 = pd.read_sql(query8, engine)
print("\n8. Genre Trend per Year")
print(df8.head(10))

# 9. Titles per rating
query9 = """
SELECT rating, COUNT(*) AS count
FROM netflix
WHERE rating IS NOT NULL AND rating != ''
GROUP BY rating
ORDER BY count DESC;
"""
df9 = pd.read_sql(query9, engine)
print("\n9. Titles per Rating")
print(df9)

# 10. Ratings by type (Movies vs TV shows)
query10 = """
SELECT type, rating, COUNT(*) AS count
FROM netflix
WHERE type IS NOT NULL AND type != '' AND rating IS NOT NULL AND rating != ''
GROUP BY type, rating
ORDER BY type, count DESC;
"""
df10 = pd.read_sql(query10, engine)
print("\n10. Ratings by Type")
print(df10.head(10))

# 11. Rating trends over years
query11 = """
SELECT release_year, rating, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND rating IS NOT NULL AND rating != ''
GROUP BY release_year, rating
ORDER BY release_year;
"""
df11 = pd.read_sql(query11, engine)
print("\n11. Rating Trends over Years")
print(df11.head(10))

# 12. Average movie duration
query12 = """
SELECT AVG(duration_int) AS avg_movie_duration
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL;
"""
df12 = pd.read_sql(query12, engine)
print("\n12. Average Movie Duration")
print(df12)

# 13. Average number of seasons for TV shows
query13 = """
SELECT AVG(duration_int) AS avg_tv_seasons
FROM netflix
WHERE type='TV Show' AND duration_int IS NOT NULL;
"""
df13 = pd.read_sql(query13, engine)
print("\n13. Average TV Seasons")
print(df13)

# 14. Longest movies
query14 = """
SELECT title, duration_int
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL
ORDER BY duration_int DESC
LIMIT 5;
"""
df14 = pd.read_sql(query14, engine)
print("\n14. Longest Movies")
print(df14)

# 15. Shortest movies
query15 = """
SELECT title, duration_int
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL
ORDER BY duration_int ASC
LIMIT 5;
"""
df15 = pd.read_sql(query15, engine)
print("\n15. Shortest Movies")
print(df15)

# 16. Top directors
query16 = """
SELECT director, COUNT(*) AS count
FROM netflix
WHERE director IS NOT NULL AND director != ''
GROUP BY director
ORDER BY count DESC
LIMIT 10;
"""
df16 = pd.read_sql(query16, engine)
print("\n16. Top Directors")
print(df16)

# 17. Most frequent actors
query17 = """
SELECT cast, COUNT(*) AS count
FROM netflix
WHERE cast IS NOT NULL AND cast != ''
GROUP BY cast
ORDER BY count DESC
LIMIT 10;
"""
df17 = pd.read_sql(query17, engine)
print("\n17. Most Frequent Actors")
print(df17)

# 18. Top directors per country
query18 = """
SELECT country, director, COUNT(*) AS count
FROM netflix
WHERE country IS NOT NULL AND country != '' AND director IS NOT NULL AND director != ''
GROUP BY country, director
ORDER BY country, count DESC;
"""
df18 = pd.read_sql(query18, engine)
print("\n18. Top Directors per Country")
print(df18.head(10))

# 19. Movies vs TV shows per year
query19 = """
SELECT release_year, type, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND type IS NOT NULL AND type != ''
GROUP BY release_year, type
ORDER BY release_year;
"""
df19 = pd.read_sql(query19, engine)
print("\n19. Movies vs TV Shows per Year")
print(df19.head(10))

# 20. Titles added per month and year
query20 = """
SELECT SUBSTR(date_added, 1, INSTR(date_added, ' ')-1) AS month,
       release_year,
       COUNT(*) AS count
FROM netflix
WHERE date_added IS NOT NULL AND date_added != '' AND release_year IS NOT NULL
GROUP BY release_year, month
ORDER BY release_year, count DESC;
"""
df20 = pd.read_sql(query20, engine)
print("\n20. Titles Added per Month and Year")
print(df20.head(10))

# Write the DataFrame to a SQLite table
df.to_sql('netflix', engine, index=False, if_exists='replace')

# Extract numeric duration
import re

def extract_number(val):
    if pd.isna(val):
        return None
    numbers = re.findall(r'\d+', str(val))
    return int(numbers[0]) if numbers else None

df['duration_int'] = df['duration'].apply(extract_number)

# Convert date_added to datetime
df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')

# Extract month name
df['month_added'] = df['date_added'].dt.month_name()

# Extract year_added (optional, for consistency)
df['year_added'] = df['date_added'].dt.year

from sqlalchemy import create_engine

engine = create_engine('sqlite:///netflix.db')
df.to_sql('netflix', engine, index=False, if_exists='replace')

query = """
SELECT country, COUNT(*) AS count
FROM netflix
WHERE country IS NOT NULL AND country != ''
GROUP BY country
ORDER BY count DESC
LIMIT 10;
"""
df_top_countries = pd.read_sql(query, engine)
df_top_countries

# 1. Movies vs TV Shows
query1 = """
SELECT type, COUNT(*) AS count
FROM netflix
WHERE type IS NOT NULL AND type != ''
GROUP BY type;
"""
df1 = pd.read_sql(query1, engine)
df1

# 2. Titles per release year
query2 = """
SELECT release_year, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL
GROUP BY release_year
ORDER BY release_year;
"""
df2 = pd.read_sql(query2, engine)
df2

# 3. Titles per month_added
query3 = """
SELECT month_added, COUNT(*) AS count
FROM netflix
WHERE month_added IS NOT NULL
GROUP BY month_added
ORDER BY count DESC;
"""
df3 = pd.read_sql(query3, engine)
df3

# 4. Top 10 countries
query4 = """
SELECT country, COUNT(*) AS count
FROM netflix
WHERE country IS NOT NULL AND country != ''
GROUP BY country
ORDER BY count DESC
LIMIT 10;
"""
df4 = pd.read_sql(query4, engine)
df4

# 5. Co-productions (multiple countries)
query5 = """
SELECT COUNT(*) AS co_productions
FROM netflix
WHERE country LIKE '%,%';
"""
df5 = pd.read_sql(query5, engine)
df5

# 6. Top 10 genres
query6 = """
SELECT listed_in, COUNT(*) AS count
FROM netflix
WHERE listed_in IS NOT NULL AND listed_in != ''
GROUP BY listed_in
ORDER BY count DESC
LIMIT 10;
"""
df6 = pd.read_sql(query6, engine)
df6

# 7. Titles with multiple genres
query7 = """
SELECT COUNT(*) AS multiple_genres
FROM netflix
WHERE listed_in LIKE '%,%';
"""
df7 = pd.read_sql(query7, engine)
df7

# 8. Genre trend per release year
query8 = """
SELECT release_year, listed_in, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND listed_in IS NOT NULL AND listed_in != ''
GROUP BY release_year, listed_in
ORDER BY release_year;
"""
df8 = pd.read_sql(query8, engine)
df8.head(10)

# 9. Titles per rating
query9 = """
SELECT rating, COUNT(*) AS count
FROM netflix
WHERE rating IS NOT NULL AND rating != ''
GROUP BY rating
ORDER BY count DESC;
"""
df9 = pd.read_sql(query9, engine)
df9

# 10. Ratings by type
query10 = """
SELECT type, rating, COUNT(*) AS count
FROM netflix
WHERE type IS NOT NULL AND type != '' AND rating IS NOT NULL AND rating != ''
GROUP BY type, rating
ORDER BY type, count DESC;
"""
df10 = pd.read_sql(query10, engine)
df10.head(10)

# 11. Rating trends over years
query11 = """
SELECT release_year, rating, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND rating IS NOT NULL AND rating != ''
GROUP BY release_year, rating
ORDER BY release_year;
"""
df11 = pd.read_sql(query11, engine)
df11.head(10)

# 12. Average movie duration
query12 = """
SELECT AVG(duration_int) AS avg_movie_duration
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL;
"""
df12 = pd.read_sql(query12, engine)
df12

# 13. Average TV seasons
query13 = """
SELECT AVG(duration_int) AS avg_tv_seasons
FROM netflix
WHERE type='TV Show' AND duration_int IS NOT NULL;
"""
df13 = pd.read_sql(query13, engine)
df13

# 14. Longest movies
query14 = """
SELECT title, duration_int
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL
ORDER BY duration_int DESC
LIMIT 5;
"""
df14 = pd.read_sql(query14, engine)
df14

# 15. Shortest movies
query15 = """
SELECT title, duration_int
FROM netflix
WHERE type='Movie' AND duration_int IS NOT NULL
ORDER BY duration_int ASC
LIMIT 5;
"""
df15 = pd.read_sql(query15, engine)
df15

# 16. Top directors
query16 = """
SELECT director, COUNT(*) AS count
FROM netflix
WHERE director IS NOT NULL AND director != ''
GROUP BY director
ORDER BY count DESC
LIMIT 10;
"""
df16 = pd.read_sql(query16, engine)
df16

# 17. Most frequent actors (fixed)
query17 = """
SELECT "cast", COUNT(*) AS count
FROM netflix
WHERE "cast" IS NOT NULL AND "cast" != ''
GROUP BY "cast"
ORDER BY count DESC
LIMIT 10;
"""
df17 = pd.read_sql(query17, engine)
df17

# 18. Top directors per country
query18 = """
SELECT country, director, COUNT(*) AS count
FROM netflix
WHERE country IS NOT NULL AND country != '' AND director IS NOT NULL AND director != ''
GROUP BY country, director
ORDER BY country, count DESC;
"""
df18 = pd.read_sql(query18, engine)
df18.head(10)

# 19. Movies vs TV shows per year
query19 = """
SELECT release_year, type, COUNT(*) AS count
FROM netflix
WHERE release_year IS NOT NULL AND type IS NOT NULL AND type != ''
GROUP BY release_year, type
ORDER BY release_year;
"""
df19 = pd.read_sql(query19, engine)
df19.head(10)

# 20. Titles added per month and year
query20 = """
SELECT year_added, month_added, COUNT(*) AS count
FROM netflix
WHERE year_added IS NOT NULL AND month_added IS NOT NULL
GROUP BY year_added, month_added
ORDER BY year_added, count DESC;
"""
df20 = pd.read_sql(query20, engine)
df20.head(10)

df_master = df[['release_year','month_added','year_added','type','rating','country','listed_in','duration_int']]
df_master.to_csv('netflix_master.csv', index=False)

df4.to_csv('top_countries.csv', index=False)
df6.to_csv('top_genres.csv', index=False)
df16.to_csv('top_directors.csv', index=False)
df17.to_csv('top_actors.csv', index=False)
df14.to_csv('longest_movies.csv', index=False)
df15.to_csv('shortest_movies.csv', index=False)
df5.to_csv('co_productions.csv', index=False)

from google.colab import files

# Master CSV
df_master.to_csv('netflix_master.csv', index=False)
files.download('netflix_master.csv')

# Small CSVs for top-N KPIs
df4.to_csv('top_countries.csv', index=False)
files.download('top_countries.csv')

df6.to_csv('top_genres.csv', index=False)
files.download('top_genres.csv')

df16.to_csv('top_directors.csv', index=False)
files.download('top_directors.csv')

df17.to_csv('top_actors.csv', index=False)
files.download('top_actors.csv')

df14.to_csv('longest_movies.csv', index=False)
files.download('longest_movies.csv')

df15.to_csv('shortest_movies.csv', index=False)
files.download('shortest_movies.csv')

df5.to_csv('co_productions.csv', index=False)
files.download('co_productions.csv')